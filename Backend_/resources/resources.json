{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Empresa MicroService Cloud Formation Template",

  "Parameters": {
    
    "AppName": {
      "Type": "String",
      "Description": "The Name of the Application",
      "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription": "must be a url compatible."
    },
    "FunctionBucket": {
      "Type": "String",
      "Default": "app-scaffold-templates",
      "Description": "Bucket Name were are stored the source code of Lambda Functions. Must be in the same region were Cloud Formation is being executed!"
    },
    "FunctionKey": {
      "Type": "String",
      "Description": "Object Key were is stored the source code of Lambda Functions. Must be in the same region were Cloud Formation is being executed!"
    },

    "AppRestAPI": {
      "Type": "String",
      "Description": "API Gateway Rest API Definition"
    },

    "AppRestAPIRootResource": {
      "Type": "String",
      "Description": "API Gateway Rest API Root Resource"
    },

    "AppBaseUrl": {
      "Type": "String",
      "Description": "Define the base url for the application"
    },

    "AppUserPoolId": {
      "Type": "String",
      "Description": "Cognito User Pool of Application"
    }
    
  },

  "Resources": {

    "ServiceTableName": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Fn::Join": ["-", [{ "Ref": "AppName" }, "Empresa"]] },
        "ProvisionedThroughput": { "ReadCapacityUnits": 1, "WriteCapacityUnits": 1 },
        "KeySchema": [{ "AttributeName": "itemId", "KeyType": "HASH" }],
        "AttributeDefinitions": [{ "AttributeName": "itemId", "AttributeType": "S" }]
      }
    },

    "MainFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": { "S3Bucket": { "Ref": "FunctionBucket" }, "S3Key": { "Ref": "FunctionKey" } },
        "FunctionName" : { "Fn::Join": ["", [{ "Ref": "AppName" }, "-Empresa-MainFunction"]] },
        "Description": { "Fn::Join": ["", [{ "Ref": "AppName" }, "-Empresa-MainFunction"]] },
        "Handler": "main.handler",
        "MemorySize": 128,
        "Role": { "Fn::GetAtt": ["MainFunctionExecutionRole", "Arn"] },
        "Environment": {
          "Variables": {
            "DYNAMO_TABLE": { "Ref": "ServiceTableName" },
            "BASE_URL": { "Ref": "AppBaseUrl" }
          }
        },
        "Runtime": "nodejs8.10",
        "Timeout": 10
      }
    },

    "MainFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["lambda.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Resource": { "Fn::GetAtt": ["ServiceTableName", "Arn"] },
                "Action": [
                  "dynamodb:GetItem", "dynamodb:Query", "dynamodb:Scan",
                  "dynamodb:BatchGetItem", "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem", "dynamodb:UpdateItem", "dynamodb:DeleteItem" ]
              },
              {
                "Effect": "Allow",
                "Resource": "*",
                "Action": ["logs:CreateLogGroup", "logs:PutLogEvents", "logs:CreateLogStream"]
              }
            ]
          }
        }]
      }
    },

    "GatewayInvokeLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": { "Fn::GetAtt": ["MainFunction", "Arn"] },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": ["", ["arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":", { "Ref": "AppRestAPI" }, "/*"]]
        }
      }
    },

    "ApiResourceEmpresas": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "AppRestAPI" },
        "ParentId": { "Ref": "AppRestAPIRootResource" },
        "PathPart": "empresa"
      }
    },

    "ApiResourceEmpresasOPTIONS": {
      "DependsOn": "GatewayInvokeLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType" : "NONE",
        "HttpMethod" : "OPTIONS",
        "ResourceId" : { "Ref": "ApiResourceEmpresas" },
        "RestApiId" : { "Ref": "AppRestAPI" },
        "Integration" : {
          "Type" : "MOCK",
          "IntegrationResponses" : [ {
            "StatusCode" : "200",
            "ResponseParameters" : { 
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
              "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
              "method.response.header.Access-Control-Allow-Origin": "'*'"
             },
             "ResponseTemplates" : { "application/json": "{'statusCode': 200}" }
          } ],
          "PassthroughBehavior" : "WHEN_NO_MATCH"
        },
        "MethodResponses" : [ {
          "StatusCode" : "200",
          "ResponseParameters" : { 
            "method.response.header.Access-Control-Allow-Headers": false,
            "method.response.header.Access-Control-Allow-Methods": false,
            "method.response.header.Access-Control-Allow-Origin": false
           }
          } ]
      }
    },

    "ApiResourceEmpresasPOST": {
      "DependsOn": "GatewayInvokeLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      
      "Properties": {
        
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "RestApiId": { "Ref": "AppRestAPI" },
        "ResourceId": { "Ref": "ApiResourceEmpresas" },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
        }
        
      }
    },
        
    "ApiResourceEmpresa": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "AppRestAPI" },
        "ParentId": { "Ref": "ApiResourceEmpresas" },
        "PathPart": "{empresaId}"
      }
    },

    "ApiResourceEmpresaOPTIONS": {
      "DependsOn": "GatewayInvokeLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType" : "NONE",
        "HttpMethod" : "OPTIONS",
        "ResourceId" : { "Ref": "ApiResourceEmpresa" },
        "RestApiId" : { "Ref": "AppRestAPI" },
        "Integration" : {
          "Type" : "MOCK",
          "IntegrationResponses" : [ {
            "StatusCode" : "200",
            "ResponseParameters" : { 
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
              "method.response.header.Access-Control-Allow-Methods": "'GET, PUT, DELETE,OPTIONS'",
              "method.response.header.Access-Control-Allow-Origin": "'*'"
             },
             "ResponseTemplates" : { "application/json": "{'statusCode': 200}" }
          } ],
          "PassthroughBehavior" : "WHEN_NO_MATCH"
        },
        "MethodResponses" : [
          {
          "StatusCode" : "200",
          "ResponseParameters" : { 
            "method.response.header.Access-Control-Allow-Headers": false,
            "method.response.header.Access-Control-Allow-Methods": false,
            "method.response.header.Access-Control-Allow-Origin": false
           }
          }]
      }
    },

    "ApiResourceEmpresaGET": {
      "DependsOn": "GatewayInvokeLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      
      "Properties": {

        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "RestApiId": { "Ref": "AppRestAPI" },
        "ResourceId": { "Ref": "ApiResourceEmpresa" },
        "RequestParameters": { "method.request.path.empresaId": true },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
        }

      }
    },

    "ApiResourceEmpresaPUT": {
      "DependsOn": "GatewayInvokeLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      
      "Properties": {

        "AuthorizationType": "NONE",
        "HttpMethod": "PUT",
        "RestApiId": { "Ref": "AppRestAPI" },
        "ResourceId": { "Ref": "ApiResourceEmpresa" },
        "RequestParameters": { "method.request.path.empresaId": true },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
        }

      }
    },

    "ApiResourceEmpresaDELETE": {
      "DependsOn": "GatewayInvokeLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      
      "Properties": {

        "AuthorizationType": "NONE",
        "HttpMethod": "DELETE",
        "RestApiId": { "Ref": "AppRestAPI" },
        "ResourceId": { "Ref": "ApiResourceEmpresa" },
        "RequestParameters": { "method.request.path.empresaId": true },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
        }

      }
    },

    "AppSyncExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["appsync.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Resource": { "Fn::GetAtt": ["ServiceTableName", "Arn"] },
                "Action": [
                  "dynamodb:GetItem", "dynamodb:Query", "dynamodb:Scan",
                  "dynamodb:BatchGetItem", "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem", "dynamodb:UpdateItem", "dynamodb:DeleteItem" ]
              },
              {
                "Effect": "Allow",
                "Resource": "*",
                "Action": ["logs:CreateLogGroup", "logs:PutLogEvents", "logs:CreateLogStream"]
              }
            ]
          }
        }]
      }
    },

    "GraphQLEndpoint": {
      "Type" : "AWS::AppSync::GraphQLApi",
      "Properties" : {
        "Name" : { "Fn::Join": ["", [{ "Ref": "AppName" }, "-EmpresaGraphQL"]] },
        "AuthenticationType" : "AMAZON_COGNITO_USER_POOLS",
        "UserPoolConfig": {
          "UserPoolId" : { "Ref": "AppUserPoolId" },
          "AwsRegion" : { "Ref" : "AWS::Region" },
          "DefaultAction" : "ALLOW"
        },
        "LogConfig" : {
          "CloudWatchLogsRoleArn" : { "Fn::GetAtt": ["AppSyncExecutionRole", "Arn"] },
          "FieldLogLevel" : "NONE"
        }
      }
    },

    "GraphQLDataSource" : {
      "Type" : "AWS::AppSync::DataSource",
      "Properties" : {
        "Type" : "AMAZON_DYNAMODB",
        "Description" : "Microservice Main Repository",
        "ServiceRoleArn" : { "Fn::GetAtt": ["AppSyncExecutionRole", "Arn"] },
        "ApiId" : { "Fn::GetAtt": ["GraphQLEndpoint", "ApiId"] },
        "Name" : { "Fn::Join": ["", [{ "Ref": "AppName" }, "EmpresaMainRepo"]] },
        "DynamoDBConfig" : {
          "TableName" : { "Ref": "ServiceTableName" },
          "AwsRegion" : { "Ref" : "AWS::Region" },
          "UseCallerCredentials" : false
        }
      }
    },

    "GraphQLSchema": {
      "Type" : "AWS::AppSync::GraphQLSchema",
      "Properties" : {
        "ApiId" : { "Fn::GetAtt": ["GraphQLEndpoint", "ApiId"] },
        "DefinitionS3Location" : { "Fn::Join": ["", ["s3://", { "Ref": "FunctionBucket" }, "/empresa-schema.graphql"]] }
      }
    },

    "GraphQLQueryByIdResolver": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "GraphQLSchema",
      "Properties" : {
        "ApiId" : { "Fn::GetAtt": ["GraphQLEndpoint", "ApiId"] },
        "TypeName" : "Query",
        "FieldName" : "byId",
        "DataSourceName" : { "Fn::GetAtt": ["GraphQLDataSource", "Name"] },
        "RequestMappingTemplateS3Location" : { "Fn::Join": ["", ["s3://", { "Ref": "FunctionBucket" }, "/empresa-queryById.requestmap.velocity"]] },
        "ResponseMappingTemplateS3Location" : { "Fn::Join": ["", ["s3://", { "Ref": "FunctionBucket" }, "/empresa-queryById.responsemap.velocity"]] }
      }
    },

    "GraphQLQueryAllResolver": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "GraphQLSchema",
      "Properties" : {
        "ApiId" : { "Fn::GetAtt": ["GraphQLEndpoint", "ApiId"] },
        "TypeName" : "Query",
        "FieldName" : "all",
        "DataSourceName" : { "Fn::GetAtt": ["GraphQLDataSource", "Name"] },
        "RequestMappingTemplateS3Location" : { "Fn::Join": ["", ["s3://", { "Ref": "FunctionBucket" }, "/empresa-queryAll.requestmap.velocity"]] },
        "ResponseMappingTemplateS3Location" : { "Fn::Join": ["", ["s3://", { "Ref": "FunctionBucket" }, "/empresa-queryAll.responsemap.velocity"]] }
      }
    }

  },

  "Outputs": {

    "TableName": {
      "Value": { "Ref": "ServiceTableName" },
      "Description": "DynamoDB Table Name"
    },

    "GraphQLUrl": {
      "Value": { "Fn::GetAtt" : [ "GraphQLEndpoint", "GraphQLUrl" ] },
      "Description": "The Endpoint URL of GraphQL API."
    }

  }

}